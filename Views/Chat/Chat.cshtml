@using System.Security.Claims
@model Care_Pulse.Models.User
@{
    ViewData["Title"] = "المحادثة";
    Layout = "_Layout";
}

<style>
    .simple-chat-container {
        max-width: 600px;
        margin: 20px auto;
        border: 1px solid #ddd;
        border-radius: 8px;
        overflow: hidden;
        font-family: 'Tajawal', sans-serif;
        direction: rtl;
    }

    .chat-header {
        background-color: #4a6fa5;
        color: white;
        padding: 15px;
        text-align: center;
    }

    .messages-container {
        height: 400px;
        overflow-y: auto;
        padding: 15px;
        background-color: #f9f9f9;
    }

    .message {
        margin-bottom: 15px;
        padding: 10px 15px;
        border-radius: 8px;
        max-width: 80%;
    }

        .message.sent {
            background-color: #e3f2fd;
            margin-left: auto;
        }

        .message.received {
            background-color: #f1f1f1;
            margin-right: auto;
        }

    .message-text {
        word-wrap: break-word;
    }

    .message-time {
        font-size: 0.8em;
        color: #666;
        margin-top: 5px;
        text-align: left;
    }

    .message-input {
        display: flex;
        padding: 15px;
        background-color: white;
        border-top: 1px solid #ddd;
    }

        .message-input input {
            flex: 1;
            padding: 10px;
            border: 1px solid #ddd;
            border-radius: 4px;
            margin-left: 10px;
        }

        .message-input button {
            padding: 10px 20px;
            background-color: #4a6fa5;
            color: white;
            border: none;
            border-radius: 4px;
            cursor: pointer;
        }

    @@media (max-width: 768px) {
        .simple-chat-container {
            margin: 10px;
            height: calc(100vh - 20px);
        }

        .messages-container {
            height: calc(100vh - 150px);
        }
    }
</style>

<div class="simple-chat-container">
    <div class="chat-header">
        <h3>محادثة مع @Model.Name</h3>
    </div>

    <div class="messages-container" id="messagesContainer">
        <!-- الرسائل ستظهر هنا تلقائيا -->
    </div>

    <div class="message-input">
        <input type="text" id="messageInput" placeholder="اكتب رسالتك هنا..." />
        <button id="sendButton">إرسال</button>
    </div>
</div>

@section Scripts {
    <script type="module">
        // استيراد مكتبات Firebase
        import { initializeApp } from "https://www.gstatic.com/firebasejs/9.6.0/firebase-app.js";
        import { getDatabase, ref, push, onChildAdded } from "https://www.gstatic.com/firebasejs/9.6.0/firebase-database.js";

        // تكوين Firebase
        const firebaseConfig = {
            apiKey: "AIzaSyCgrn9MIAa3J6TL-KW_gWbmMw3hz_qL7t0",
            authDomain: "doctor-chat-app-5df92.firebaseapp.com",
            databaseURL: "https://doctor-chat-app-5df92-default-rtdb.firebaseio.com",
            projectId: "doctor-chat-app-5df92",
            storageBucket: "doctor-chat-app-5df92.appspot.com",
            messagingSenderId: "319942931151",
            appId: "1:319942931151:web:92ce7433148765adf63dba",
            measurementId: "G-R5PMNV2LB3"
        };

        // تهيئة Firebase
        const app = initializeApp(firebaseConfig);
        const database = getDatabase(app);

        // الحصول على ID المستخدمين
        const currentUserId = "@User.FindFirst(ClaimTypes.NameIdentifier)?.Value";
        const otherUserId = "@Model.Id";

        // إنشاء معرف محادثة فريد (ترتيب الأرقام للتأكد من أنه نفس الـ ID لكلا المستخدمين)
        const chatId = currentUserId < otherUserId ?
            `${currentUserId}_${otherUserId}` :
            `${otherUserId}_${currentUserId}`;

        // إرسال رسالة
        function sendMessage() {
            const input = document.getElementById('messageInput');
            const messageText = input.value.trim();

            if (messageText) {
                push(ref(database, `chats/${chatId}/messages`), {
                    text: messageText,
                    senderId: currentUserId,
                    timestamp: Date.now()
                });
                input.value = '';
                input.focus();
            }
        }

        // عرض الرسالة في الواجهة
        function displayMessage(message) {
            const container = document.getElementById('messagesContainer');
            const isCurrentUser = message.senderId === currentUserId;

            const messageDiv = document.createElement('div');
            messageDiv.className = `message ${isCurrentUser ? 'sent' : 'received'}`;

            messageDiv.innerHTML = `
                <div class="message-text">${message.text}</div>
                <div class="message-time">${formatTime(message.timestamp)}</div>
            `;

            container.appendChild(messageDiv);
            container.scrollTop = container.scrollHeight;
        }

        // تنسيق الوقت
        function formatTime(timestamp) {
            const date = new Date(timestamp);
            return date.toLocaleTimeString([], {
                hour: '2-digit',
                minute: '2-digit',
                hour12: true
            });
        }

        // مستمعي الأحداث
        document.getElementById('sendButton').addEventListener('click', sendMessage);
        document.getElementById('messageInput').addEventListener('keypress', (e) => {
            if (e.key === 'Enter') sendMessage();
        });

        // الاستماع للرسائل الجديدة
        onChildAdded(ref(database, `chats/${chatId}/messages`), (snapshot) => {
            displayMessage(snapshot.val());
        });

        // رسالة ترحيبية عند بدء المحادثة
        displayMessage({
            text: "لقد بدأت محادثة جديدة مع " + "@Model.Name",
            senderId: currentUserId,
            timestamp: Date.now()
        });
    </script>
}